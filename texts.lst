                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.4 #11941 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module texts
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _set_win_tiles
                                     12 	.globl _set_bkg_data
                                     13 	.globl _text_load_font
                                     14 	.globl _text_putchar_win
                                     15 	.globl _text_putstr_win
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area _DATA
                                     23 ;--------------------------------------------------------
                                     24 ; absolute external ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area _DABS (ABS)
                                     27 ;--------------------------------------------------------
                                     28 ; global & static initialisations
                                     29 ;--------------------------------------------------------
                                     30 	.area _HOME
                                     31 	.area _GSINIT
                                     32 	.area _GSFINAL
                                     33 	.area _GSINIT
                                     34 ;--------------------------------------------------------
                                     35 ; Home
                                     36 ;--------------------------------------------------------
                                     37 	.area _HOME
                                     38 	.area _HOME
                                     39 ;--------------------------------------------------------
                                     40 ; code
                                     41 ;--------------------------------------------------------
                                     42 	.area _CODE
                                     43 ;src/texts.c:9: void	text_load_font(UINT8 code) {
                                     44 ;	---------------------------------
                                     45 ; Function text_load_font
                                     46 ; ---------------------------------
      000000                         47 _text_load_font::
                                     48 ;src/texts.c:10: if (code == 0) {
      000000 F8 02                   49 	ldhl	sp,	#2
      000002 7E                      50 	ld	a, (hl)
      000003 B7                      51 	or	a, a
      000004 20 0E                   52 	jr	NZ, 00107$
                                     53 ;src/texts.c:11: set_bkg_data(TEXT_OFFSET, FONT_COUNT, FONT_TILESET);
      000006 21r00r00                54 	ld	hl, #_FONT_TILESET
      000009 E5                      55 	push	hl
      00000A 11 D0 30                56 	ld	de, #0x30d0
      00000D D5                      57 	push	de
      00000E CDr00r00                58 	call	_set_bkg_data
      000011 E8 04                   59 	add	sp, #4
      000013 C9                      60 	ret
      000014                         61 00107$:
                                     62 ;src/texts.c:13: else if (code == 1) {
      000014 F8 02                   63 	ldhl	sp,	#2
      000016 7E                      64 	ld	a, (hl)
      000017 3D                      65 	dec	a
      000018 20 0E                   66 	jr	NZ, 00104$
                                     67 ;src/texts.c:14: set_bkg_data(TEXT_OFFSET, FONT_COUNT, FONT_TILESET_BLCK);
      00001A 21r00r00                68 	ld	hl, #_FONT_TILESET_BLCK
      00001D E5                      69 	push	hl
      00001E 11 D0 30                70 	ld	de, #0x30d0
      000021 D5                      71 	push	de
      000022 CDr00r00                72 	call	_set_bkg_data
      000025 E8 04                   73 	add	sp, #4
      000027 C9                      74 	ret
      000028                         75 00104$:
                                     76 ;src/texts.c:16: else if (code == 2) {
      000028 F8 02                   77 	ldhl	sp,	#2
      00002A 7E                      78 	ld	a, (hl)
      00002B D6 02                   79 	sub	a, #0x02
      00002D C0                      80 	ret	NZ
                                     81 ;src/texts.c:17: set_bkg_data(TEXT_OFFSET, FONT_COUNT, FONT_BLCK);
      00002E 21r00r00                82 	ld	hl, #_FONT_BLCK
      000031 E5                      83 	push	hl
      000032 11 D0 30                84 	ld	de, #0x30d0
      000035 D5                      85 	push	de
      000036 CDr00r00                86 	call	_set_bkg_data
      000039 E8 04                   87 	add	sp, #4
                                     88 ;src/texts.c:19: }
      00003B C9                      89 	ret
                                     90 ;src/texts.c:21: void	text_putchar_win(UINT8 x, UINT8 y, unsigned char c) {
                                     91 ;	---------------------------------
                                     92 ; Function text_putchar_win
                                     93 ; ---------------------------------
      00003C                         94 _text_putchar_win::
      00003C E8 FE                   95 	add	sp, #-2
                                     96 ;src/texts.c:22: UINT16	tile = TEXT_CHAR_QS_MARK;
      00003E F8 00                   97 	ldhl	sp,	#0
      000040 36 FB                   98 	ld	(hl), #0xfb
      000042 AF                      99 	xor	a, a
      000043 23                     100 	inc	hl
      000044 77                     101 	ld	(hl), a
                                    102 ;src/texts.c:24: if (c >= 'A' && c <= 'Z') {
      000045 F8 06                  103 	ldhl	sp,	#6
      000047 7E                     104 	ld	a, (hl)
      000048 D6 41                  105 	sub	a, #0x41
      00004A 38 12                  106 	jr	C, 00121$
      00004C 3E 5A                  107 	ld	a, #0x5a
      00004E 96                     108 	sub	a, (hl)
      00004F 38 0D                  109 	jr	C, 00121$
                                    110 ;src/texts.c:25: tile = TEXT_CHAR_A + c - 'A';
      000051 4E                     111 	ld	c, (hl)
      000052 06 00                  112 	ld	b, #0x00
      000054 21 8F 00               113 	ld	hl, #0x008f
      000057 09                     114 	add	hl, bc
      000058 33                     115 	inc	sp
      000059 33                     116 	inc	sp
      00005A E5                     117 	push	hl
      00005B C3r30r01               118 	jp	00122$
      00005E                        119 00121$:
                                    120 ;src/texts.c:27: else if (c >= 'a' && c <= 'z') {
      00005E F8 06                  121 	ldhl	sp,	#6
      000060 7E                     122 	ld	a, (hl)
      000061 D6 61                  123 	sub	a, #0x61
      000063 38 12                  124 	jr	C, 00117$
      000065 3E 7A                  125 	ld	a, #0x7a
      000067 96                     126 	sub	a, (hl)
      000068 38 0D                  127 	jr	C, 00117$
                                    128 ;src/texts.c:28: tile = TEXT_CHAR_A + c - 'a';
      00006A 4E                     129 	ld	c, (hl)
      00006B 06 00                  130 	ld	b, #0x00
      00006D 21 6F 00               131 	ld	hl, #0x006f
      000070 09                     132 	add	hl, bc
      000071 33                     133 	inc	sp
      000072 33                     134 	inc	sp
      000073 E5                     135 	push	hl
      000074 C3r30r01               136 	jp	00122$
      000077                        137 00117$:
                                    138 ;src/texts.c:30: else if (c >= '0' && c <= '9') {
      000077 F8 06                  139 	ldhl	sp,	#6
      000079 7E                     140 	ld	a, (hl)
      00007A D6 30                  141 	sub	a, #0x30
      00007C 38 12                  142 	jr	C, 00113$
      00007E 3E 39                  143 	ld	a, #0x39
      000080 96                     144 	sub	a, (hl)
      000081 38 0D                  145 	jr	C, 00113$
                                    146 ;src/texts.c:31: tile = TEXT_CHAR_0 + c - '0';
      000083 4E                     147 	ld	c, (hl)
      000084 06 00                  148 	ld	b, #0x00
      000086 21 BA 00               149 	ld	hl, #0x00ba
      000089 09                     150 	add	hl, bc
      00008A 33                     151 	inc	sp
      00008B 33                     152 	inc	sp
      00008C E5                     153 	push	hl
      00008D C3r30r01               154 	jp	00122$
      000090                        155 00113$:
                                    156 ;src/texts.c:34: switch (c) {
      000090 F8 06                  157 	ldhl	sp,	#6
      000092 7E                     158 	ld	a, (hl)
      000093 D6 20                  159 	sub	a, #0x20
      000095 28 41                  160 	jr	Z, 00101$
      000097 F8 06                  161 	ldhl	sp,	#6
      000099 7E                     162 	ld	a, (hl)
      00009A D6 21                  163 	sub	a, #0x21
      00009C 28 79                  164 	jr	Z, 00108$
      00009E F8 06                  165 	ldhl	sp,	#6
      0000A0 7E                     166 	ld	a, (hl)
      0000A1 D6 27                  167 	sub	a, #0x27
      0000A3 28 3C                  168 	jr	Z, 00102$
      0000A5 F8 06                  169 	ldhl	sp,	#6
      0000A7 7E                     170 	ld	a, (hl)
      0000A8 D6 28                  171 	sub	a, #0x28
      0000AA 28 74                  172 	jr	Z, 00109$
      0000AC F8 06                  173 	ldhl	sp,	#6
      0000AE 7E                     174 	ld	a, (hl)
      0000AF D6 29                  175 	sub	a, #0x29
      0000B1 28 76                  176 	jr	Z, 00110$
      0000B3 F8 06                  177 	ldhl	sp,	#6
      0000B5 7E                     178 	ld	a, (hl)
      0000B6 D6 2C                  179 	sub	a, #0x2c
      0000B8 28 42                  180 	jr	Z, 00105$
      0000BA F8 06                  181 	ldhl	sp,	#6
      0000BC 7E                     182 	ld	a, (hl)
      0000BD D6 2D                  183 	sub	a, #0x2d
      0000BF 28 29                  184 	jr	Z, 00103$
      0000C1 F8 06                  185 	ldhl	sp,	#6
      0000C3 7E                     186 	ld	a, (hl)
      0000C4 D6 2E                  187 	sub	a, #0x2e
      0000C6 28 2B                  188 	jr	Z, 00104$
      0000C8 F8 06                  189 	ldhl	sp,	#6
      0000CA 7E                     190 	ld	a, (hl)
      0000CB D6 3A                  191 	sub	a, #0x3a
      0000CD 28 36                  192 	jr	Z, 00106$
      0000CF F8 06                  193 	ldhl	sp,	#6
      0000D1 7E                     194 	ld	a, (hl)
      0000D2 D6 3B                  195 	sub	a, #0x3b
      0000D4 28 38                  196 	jr	Z, 00107$
      0000D6 18 58                  197 	jr	00122$
                                    198 ;src/texts.c:35: case ' ':
      0000D8                        199 00101$:
                                    200 ;src/texts.c:36: tile = TEXT_CHAR_SPACE;
      0000D8 F8 00                  201 	ldhl	sp,	#0
      0000DA 36 FF                  202 	ld	(hl), #0xff
      0000DC AF                     203 	xor	a, a
      0000DD 23                     204 	inc	hl
      0000DE 77                     205 	ld	(hl), a
                                    206 ;src/texts.c:37: break ;
      0000DF 18 4F                  207 	jr	00122$
                                    208 ;src/texts.c:38: case '\'':
      0000E1                        209 00102$:
                                    210 ;src/texts.c:39: tile = TEXT_CHAR_QUOTE;
      0000E1 F8 00                  211 	ldhl	sp,	#0
      0000E3 36 F4                  212 	ld	(hl), #0xf4
      0000E5 AF                     213 	xor	a, a
      0000E6 23                     214 	inc	hl
      0000E7 77                     215 	ld	(hl), a
                                    216 ;src/texts.c:40: break ;
      0000E8 18 46                  217 	jr	00122$
                                    218 ;src/texts.c:41: case '-':
      0000EA                        219 00103$:
                                    220 ;src/texts.c:42: tile = TEXT_CHAR_DASH;
      0000EA F8 00                  221 	ldhl	sp,	#0
      0000EC 36 F5                  222 	ld	(hl), #0xf5
      0000EE AF                     223 	xor	a, a
      0000EF 23                     224 	inc	hl
      0000F0 77                     225 	ld	(hl), a
                                    226 ;src/texts.c:43: break ;
      0000F1 18 3D                  227 	jr	00122$
                                    228 ;src/texts.c:44: case '.':
      0000F3                        229 00104$:
                                    230 ;src/texts.c:45: tile = TEXT_CHAR_DOT;
      0000F3 F8 00                  231 	ldhl	sp,	#0
      0000F5 36 F6                  232 	ld	(hl), #0xf6
      0000F7 AF                     233 	xor	a, a
      0000F8 23                     234 	inc	hl
      0000F9 77                     235 	ld	(hl), a
                                    236 ;src/texts.c:46: break ;
      0000FA 18 34                  237 	jr	00122$
                                    238 ;src/texts.c:47: case ',':
      0000FC                        239 00105$:
                                    240 ;src/texts.c:48: tile = TEXT_CHAR_COMMA;
      0000FC F8 00                  241 	ldhl	sp,	#0
      0000FE 36 F7                  242 	ld	(hl), #0xf7
      000100 AF                     243 	xor	a, a
      000101 23                     244 	inc	hl
      000102 77                     245 	ld	(hl), a
                                    246 ;src/texts.c:49: break ;
      000103 18 2B                  247 	jr	00122$
                                    248 ;src/texts.c:50: case ':':
      000105                        249 00106$:
                                    250 ;src/texts.c:51: tile = TEXT_CHAR_DL_DOTS;
      000105 F8 00                  251 	ldhl	sp,	#0
      000107 36 F8                  252 	ld	(hl), #0xf8
      000109 AF                     253 	xor	a, a
      00010A 23                     254 	inc	hl
      00010B 77                     255 	ld	(hl), a
                                    256 ;src/texts.c:52: break ;
      00010C 18 22                  257 	jr	00122$
                                    258 ;src/texts.c:53: case ';':
      00010E                        259 00107$:
                                    260 ;src/texts.c:54: tile = TEXT_CHAR_SEMICOLON;
      00010E F8 00                  261 	ldhl	sp,	#0
      000110 36 F9                  262 	ld	(hl), #0xf9
      000112 AF                     263 	xor	a, a
      000113 23                     264 	inc	hl
      000114 77                     265 	ld	(hl), a
                                    266 ;src/texts.c:55: break ;
      000115 18 19                  267 	jr	00122$
                                    268 ;src/texts.c:56: case '!':
      000117                        269 00108$:
                                    270 ;src/texts.c:57: tile = TEXT_CHAR_EX_MARK;
      000117 F8 00                  271 	ldhl	sp,	#0
      000119 36 FA                  272 	ld	(hl), #0xfa
      00011B AF                     273 	xor	a, a
      00011C 23                     274 	inc	hl
      00011D 77                     275 	ld	(hl), a
                                    276 ;src/texts.c:58: break ;
      00011E 18 10                  277 	jr	00122$
                                    278 ;src/texts.c:59: case '(':
      000120                        279 00109$:
                                    280 ;src/texts.c:60: tile = TEXT_CHAR_BRK_L;
      000120 F8 00                  281 	ldhl	sp,	#0
      000122 36 FC                  282 	ld	(hl), #0xfc
      000124 AF                     283 	xor	a, a
      000125 23                     284 	inc	hl
      000126 77                     285 	ld	(hl), a
                                    286 ;src/texts.c:61: break ;
      000127 18 07                  287 	jr	00122$
                                    288 ;src/texts.c:62: case ')':
      000129                        289 00110$:
                                    290 ;src/texts.c:63: tile = TEXT_CHAR_BRK_R;
      000129 F8 00                  291 	ldhl	sp,	#0
      00012B 36 FD                  292 	ld	(hl), #0xfd
      00012D AF                     293 	xor	a, a
      00012E 23                     294 	inc	hl
      00012F 77                     295 	ld	(hl), a
                                    296 ;src/texts.c:65: }
      000130                        297 00122$:
                                    298 ;src/texts.c:67: set_win_tiles(x, y, 1, 1, &tile);
      000130 F8 00                  299 	ldhl	sp,	#0
      000132 E5                     300 	push	hl
      000133 11 01 01               301 	ld	de, #0x0101
      000136 D5                     302 	push	de
      000137 F8 09                  303 	ldhl	sp,	#9
      000139 7E                     304 	ld	a, (hl)
      00013A F5                     305 	push	af
      00013B 33                     306 	inc	sp
      00013C 2B                     307 	dec	hl
      00013D 7E                     308 	ld	a, (hl)
      00013E F5                     309 	push	af
      00013F 33                     310 	inc	sp
      000140 CDr00r00               311 	call	_set_win_tiles
      000143 E8 06                  312 	add	sp, #6
                                    313 ;src/texts.c:68: }
      000145 E8 02                  314 	add	sp, #2
      000147 C9                     315 	ret
                                    316 ;src/texts.c:70: void	text_putstr_win(UINT8 x, UINT8 y, unsigned char *str) {
                                    317 ;	---------------------------------
                                    318 ; Function text_putstr_win
                                    319 ; ---------------------------------
      000148                        320 _text_putstr_win::
      000148 E8 FD                  321 	add	sp, #-3
                                    322 ;src/texts.c:72: UINT8 tmpX = x;
      00014A F8 05                  323 	ldhl	sp,	#5
      00014C 4E                     324 	ld	c, (hl)
      00014D F8 00                  325 	ldhl	sp,	#0
      00014F 71                     326 	ld	(hl), c
                                    327 ;src/texts.c:73: UINT8 tmpY = y;
      000150 F8 06                  328 	ldhl	sp,	#6
      000152 7E                     329 	ld	a, (hl)
      000153 F8 01                  330 	ldhl	sp,	#1
      000155 77                     331 	ld	(hl), a
                                    332 ;src/texts.c:75: while (str[i]) {
      000156 AF                     333 	xor	a, a
      000157 23                     334 	inc	hl
      000158 77                     335 	ld	(hl), a
      000159                        336 00104$:
                                    337 ;c
      000159 F8 07                  338 	ldhl	sp,#7
      00015B 2A                     339 	ld	a, (hl+)
      00015C 5F                     340 	ld	e, a
      00015D 56                     341 	ld	d, (hl)
      00015E F8 02                  342 	ldhl	sp,	#2
      000160 6E                     343 	ld	l, (hl)
      000161 26 00                  344 	ld	h, #0x00
      000163 19                     345 	add	hl, de
      000164 5D                     346 	ld	e, l
      000165 54                     347 	ld	d, h
      000166 1A                     348 	ld	a, (de)
      000167 B7                     349 	or	a, a
      000168 28 25                  350 	jr	Z, 00107$
                                    351 ;src/texts.c:76: if (str[i] == '\n') {
      00016A FE 0A                  352 	cp	a, #0x0a
      00016C 20 07                  353 	jr	NZ, 00102$
                                    354 ;src/texts.c:77: tmpY++;
      00016E F8 01                  355 	ldhl	sp,	#1
      000170 34                     356 	inc	(hl)
                                    357 ;src/texts.c:78: tmpX = x;
      000171 2B                     358 	dec	hl
      000172 71                     359 	ld	(hl), c
      000173 18 15                  360 	jr	00103$
      000175                        361 00102$:
                                    362 ;src/texts.c:81: text_putchar_win(tmpX, tmpY, str[i]);
      000175 C5                     363 	push	bc
      000176 F5                     364 	push	af
      000177 33                     365 	inc	sp
      000178 F8 04                  366 	ldhl	sp,	#4
      00017A 7E                     367 	ld	a, (hl)
      00017B F5                     368 	push	af
      00017C 33                     369 	inc	sp
      00017D 2B                     370 	dec	hl
      00017E 7E                     371 	ld	a, (hl)
      00017F F5                     372 	push	af
      000180 33                     373 	inc	sp
      000181 CDr3Cr00               374 	call	_text_putchar_win
      000184 E8 03                  375 	add	sp, #3
      000186 C1                     376 	pop	bc
                                    377 ;src/texts.c:82: tmpX++;
      000187 F8 00                  378 	ldhl	sp,	#0
      000189 34                     379 	inc	(hl)
      00018A                        380 00103$:
                                    381 ;src/texts.c:84: i++;
      00018A F8 02                  382 	ldhl	sp,	#2
      00018C 34                     383 	inc	(hl)
      00018D 18 CA                  384 	jr	00104$
      00018F                        385 00107$:
                                    386 ;src/texts.c:86: }
      00018F E8 03                  387 	add	sp, #3
      000191 C9                     388 	ret
                                    389 	.area _CODE
                                    390 	.area _CABS (ABS)
